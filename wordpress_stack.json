{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Single AZ Scaleable Wordpress Cloudformation template: WordPress is web software you can use to create a beautiful website or blog. This template installs a scalable WordPress deployment behind an Amazon Elastic Load Balancer using a single AZ Amazon RDS database instance, In-memory object caching using Amazon Elasticache, and shared storage using Amazon Elastic Filesystem. It demonstrates using the AWS CloudFormation bootstrap scripts to deploy WordPress. **WARNING** This template creates an Amazon EC2 instance, an Application Load Balancer, Amazon RDS database instance, Amazon Elasticache instance, and a Route53 hosted zone. You will be billed for the AWS resources used if you create a stack from this template.",
    "Parameters": {
        "WebsiteName": {
            "Description": "The address of your website. ie www.example.com",
            "Type": "String",
            "ConstraintDescription": "must be the fully qualified domain name of the website."
        },
        “HostedZoneName”: {
            "Description": "The portion of the website address that is your domain name. ie. example.com",
            "Type": "String",
            "ConstraintDescription": "must be the fully qualified domain name of the website."
        },
        "SSHKey": {
            “Default”: “# No SSH public key specified…”,
            "Description": "The SSH public key to be added to the /home/bitnami/authorized_keys file.",
            "Type": "String"
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "SSHLocation": {
            "Description": "The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "DBName": {
            "Default": "wordpress",
            "Description": "The WordPress database name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters and underscores."
        },
        "DBMasterUser": {
            "Default": "root",
            "Description": "The RDS database admin username",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern": "[a-zA-Z_][a-zA-Z0-9_]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters and underscores."
        },
        "DBUser": {
            "Default": "wordpress",
            "Description": "The WordPress database admin account username",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters and underscores."
        },
        "DBAllocatedStorage": {
            "Default": "20",
            "Description": "The size of the database (Gb)",
            "Type": "Number",
            "MinValue": "20",
            "MaxValue": "1024",
            "ConstraintDescription": "must be between 20 and 1024Gb."
        }
    },
    "Mappings": {
        "AWSRegion2AZ": {
            "AZ": {
                "1": "a",
                "2": "b",
                "3": "c",
                "4": "d"
            }
        },
        "AWSRegion2AMI": {
            "ap-south-1": {
                "amiID": "ami-04aa6c373519ca316"
            },
            "eu-north-1": {
                "amiID": "ami-3253db4c"
            },
            "eu-west-3": {
                "amiID": "ami-08a29e1367445fdac"
            },
            "eu-west-2": {
                "amiID": "ami-0b935387a4d96379b"
            },
            "eu-west-1": {
                "amiID": "ami-0cad25e5766a2edb8"
            },
            "ap-northeast-2": {
                "amiID": "ami-0245f01df75d09a0d"
            },
            "ap-northeast-1": {
                "amiID": "ami-0fb42e3775f507181"
            },
            "ca-central-1": {
                "amiID": "ami-07bc25f492efebe38"
            },
            "sa-east-1": {
                "amiID": "ami-01133919836637df9"
            },
            "ap-east-1": {
                "amiID": "ami-24dea655"
            },
            "us-gov-west-1": {
                "amiID": "ami-eabac58b"
            },
            "ap-southeast-1": {
                "amiID": "ami-0e5374cee9de3f9a1"
            },
            "ap-southeast-2": {
                "amiID": "ami-0751c52d1a953f71f"
            },
            "eu-central-1": {
                "amiID": "ami-09b88076ef152d69e"
            },
            "us-east-1": {
                "amiID": "ami-0c27caaf514f22992"
            },
            "us-east-2": {
                "amiID": "ami-0185c5b771a33f897"
            },
            "us-west-1": {
                "amiID": "ami-00c12ff0c888bb87e"
            },
            "us-west-2": {
                "amiID": "ami-0b3324c9daf4d6393"
            }
        }
    },
    "Resources": {
        "AWSBackupExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "backup.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "AWSBackupPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "backup:*",
                                        "tag:*"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "Web2EFSSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Open EFS Filesystem for access",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "2049",
                        "ToPort": "2049",
                        "SourceSecurityGroupId": {
                            "Ref": "WebServerSecurityGroup"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "EFSFilesystem": {
            "Type": "AWS::EFS::FileSystem",
            "Properties": {
                "PerformanceMode": "generalPurpose",
                "FileSystemTags": [
                    {
                        "Key": "AWSBackupIsEnabled",
                        "Value": "True"
                    }
                ]
            }
        },
        "EFSMountTarget": {
            "Type": "AWS::EFS::MountTarget",
            "Properties": {
                "FileSystemId": {
                    "Ref": "EFSFilesystem"
                },
                "SubnetId": {
                    "Ref": "SubnetA"
                },
                "SecurityGroups": [
                    {
                        "Ref": "Web2EFSSecurityGroup"
                    }
                ]
            }
        },
        "DBMasterPassword": {
            "Type": "Custom::DBMasterPassword",
            "Properties": {
                "ServiceToken": {
                    "Fn::Join": [
                        ":",
                        [
                            "arn:aws:lambda",
                            {
                                "Ref": "AWS::Region"
                            },
                            {
                                "Ref": "AWS::AccountId"
                            },
                            "function:generateRandomString"
                        ]
                    ]
                },
                "PasswordLength": 20
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "66c02b2d-1cd6-49cb-8c21-581aa3ba97de"
                }
            }
        },
        "DBPassword": {
            "Type": "Custom::DBPassword",
            "Properties": {
                "ServiceToken": {
                    "Fn::Join": [
                        ":",
                        [
                            "arn:aws:lambda",
                            {
                                "Ref": "AWS::Region"
                            },
                            {
                                "Ref": "AWS::AccountId"
                            },
                            "function:generateRandomString"
                        ]
                    ]
                },
                "PasswordLength": 20
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "66c02b2d-1cd6-49cb-8c21-581aa3ba97de"
                }
            }
        },
        "WPAdminPassword": {
            "Type": "Custom::WPAdminPassword",
            "Properties": {
                "ServiceToken": {
                    "Fn::Join": [
                        ":",
                        [
                            "arn:aws:lambda",
                            {
                                "Ref": "AWS::Region"
                            },
                            {
                                "Ref": "AWS::AccountId"
                            },
                            "function:generateRandomString"
                        ]
                    ]
                },
                "PasswordLength": 20
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "b00365a3-f973-49be-a026-971e776def48"
                }
            }
        },
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.16.0.0/16",
                "EnableDnsHostnames": true,
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "5ca5c39d-118a-4f54-a62c-c54ba6741ddc"
                }
            }
        },
        "SubnetA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "MapPublicIpOnLaunch": true,
                "CidrBlock": "10.16.1.0/24",
                "AvailabilityZone": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::Region"
                            },
                            {
                                "Fn::FindInMap": [
                                    "AWSRegion2AZ",
                                    "AZ",
                                    "1"
                                ]
                            }
                        ]
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "e8439c88-53be-4401-85a1-926dbf89ca4f"
                }
            }
        },
        "SubnetB": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "MapPublicIpOnLaunch": true,
                "CidrBlock": "10.16.2.0/24",
                "AvailabilityZone": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::Region"
                            },
                            {
                                "Fn::FindInMap": [
                                    "AWSRegion2AZ",
                                    "AZ",
                                    "2"
                                ]
                            }
                        ]
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "e8439c88-53be-4401-85a1-926dbf89ca4f"
                }
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "5ce2adf4-0503-43b8-b8f4-9d5e06db4912"
                }
            }
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "650ebb45-34a0-402d-8157-6d1108586086"
                }
            }
        },
        "RouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "bc3fd49f-b730-4d1d-a087-a99e073318a5"
                }
            }
        },
        "Route": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "AttachGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "8317542d-5279-4506-936c-3027a2c0a7d3"
                }
            }
        },
        "SubnetRouteTableAssociationA": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetA"
                },
                "RouteTableId": {
                    "Ref": "RouteTable"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "14da25c3-f86d-4833-980b-57bde24f33f6"
                }
            }
        },
        "SubnetRouteTableAssociationB": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetB"
                },
                "RouteTableId": {
                    "Ref": "RouteTable"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "14da25c3-f86d-4833-980b-57bde24f33f6"
                }
            }
        },
        "NetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "5445b646-8742-4b6c-9eca-26fa536a8a6f"
                }
            }
        },
        "InboundNetworkAclEntry4": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "100",
                "Protocol": "-1",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "InboundNetworkAclEntry6": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "101",
                "Protocol": "-1",
                "RuleAction": "allow",
                "Egress": "false",
                "Ipv6CidrBlock": "::/0"
            }
        },
        "OutboundNetworkAclEntry4": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "100",
                "Protocol": "-1",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "OutboundNetworkAclEntry6": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "101",
                "Protocol": "-1",
                "RuleAction": "allow",
                "Egress": "true",
                "Ipv6CidrBlock": "::/0"
            }
        },
        "SubnetNetworkAclAssociationA": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetA"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "e9cf76c2-830a-435a-8e81-4d015e647c6a"
                }
            }
        },
        "SubnetNetworkAclAssociationB": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetB"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "e9cf76c2-830a-435a-8e81-4d015e647c6a"
                }
            }
        },
        "IPAddress": {
            "Type": "AWS::EC2::EIP",
            "DependsOn": [
                "AttachGateway"
            ],
            "Properties": {
                "Domain": "vpc"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "4e3c57ed-6327-4bab-a3b2-6fc6facfb077"
                }
            }
        },
        "CacheSubnetGroup": {
            "Type": "AWS::ElastiCache::SubnetGroup",
            "Properties": {
                "Description": "Cache Subnet Group",
                "SubnetIds": [
                    {
                        "Ref": "SubnetA"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "3b5db50b-43cf-4fcd-be69-217a5da0b3d9"
                }
            }
        },
        "redis": {
            "Type": "AWS::ElastiCache::ReplicationGroup",
            "Properties": {
                "ReplicationGroupDescription": "redis",
                "AutomaticFailoverEnabled": true,
                "NumNodeGroups": "1",
                "ReplicasPerNodeGroup": "0",
                "Engine": "redis",
                "CacheNodeType": "cache.t2.micro",
                "AutoMinorVersionUpgrade": "true",
                "CacheSubnetGroupName": {
                    "Ref": "CacheSubnetGroup"
                },
                "EngineVersion": "5.0.3",
                "CacheParameterGroupName": "default.redis5.0.cluster.on",
                "PreferredMaintenanceWindow": "wed:09:25-wed:22:30",
                "SnapshotRetentionLimit": "7",
                "SnapshotWindow": "03:30-05:30",
                "SecurityGroupIds": [
                    {
                        "Fn::GetAtt": [
                            "Ecache2EC2",
                            "GroupId"
                        ]
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "e281bcbd-c795-4380-bcbe-b79c90b78fe3"
                }
            }
        },
        "ACMCertificate": {
            "Type": "AWS::CertificateManager::Certificate",
            "Properties": {
                "DomainName": {
                    "Ref": "WebsiteName"
                },
                "ValidationMethod": "DNS"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "4d7d61aa-c5ff-4721-95de-1e468708820b"
                }
            }
        },
        "ApplicationLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Subnets": [
                    {
                        "Ref": "SubnetA"
                    },
                    {
                        "Ref": "SubnetB"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "WEB2ALB"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "ad2a9854-8204-4b42-bd92-a304f0a3e4ac"
                }
            }
        },
        "ALBHTTPSListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "Certificates": [
                    {
                        "CertificateArn": {
                            "Ref": "ACMCertificate"
                        }
                    }
                ],
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ALBTargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "ApplicationLoadBalancer"
                },
                "Port": "443",
                "Protocol": "HTTPS"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "cb912fe3-95e2-43c8-be77-0bc3b96f1bde"
                }
            },
            "DependsOn": [
                "ACMCertificate"
            ]
        },
        "ALBTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckPath": "/",
                "HealthCheckIntervalSeconds": 10,
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 2,
                "Port": 443,
                "Protocol": "HTTPS",
                "UnhealthyThresholdCount": 5,
                "VpcId": {
                    "Ref": "VPC"
                },
                "TargetGroupAttributes": [
                    {
                        "Key": "stickiness.enabled",
                        "Value": "true"
                    },
                    {
                        "Key": "stickiness.type",
                        "Value": "lb_cookie"
                    },
                    {
                        "Key": "stickiness.lb_cookie.duration_seconds",
                        "Value": "30"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "f2dddff0-b271-47ff-9211-1d4772d5c93f"
                }
            }
        },
        "WebServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTPS access locked down to the load balancer + SSH access",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "SourceSecurityGroupId": {
                            "Ref": "WEB2ALB"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "139f46c6-d78d-47eb-8e7f-6be8867ce059"
                }
            }
        },
        "WebServerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "SubnetA"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfig"
                },
                "MinSize": "1",
                "MaxSize": "1",
                "DesiredCapacity": "1",
                "TargetGroupARNs": [
                    {
                        "Ref": "ALBTargetGroup"
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT2H"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": "1",
                    "MaxBatchSize": "1",
                    "PauseTime": "PT15M",
                    "WaitOnResourceSignals": "true"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "d261ec7c-197b-460e-9fa3-b42f3465bb01"
                }
            },
            "DependsOn": [
                "DBInstance",
                "redis"
            ]
        },
        "LaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "a4a3c40e-307e-4eae-ab53-797f87e55f24"
                },
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "install_wordpress": [
                            "install_cfn",
                            "configure_ssh",
                            "configure_efs",
                            "configure_mysql",
                            "configure_redis",
                            "configure_wordpress"
                        ]
                    },
                    "install_cfn": {
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init -v",
                                            " --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            " --resource LaunchConfig ",
                                            " --configsets install_wordpress ",
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/lib/systemd/system/cfn-hup.service": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[Unit]\n",
                                            "Description=cfn-hup daemon\n\n",
                                            "[Service]\n",
                                            "Type=simple\n",
                                            "ExecStart=/opt/aws/bin/cfn-hup\n",
                                            "Restart=always\n\n",
                                            "[Install]\n",
                                            "WantedBy=multi-user.target"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "01enable_cfn_hup": {
                                "command": "systemctl enable cfn-hup.service"
                            },
                            "02start_cfn_hup": {
                                "command": "systemctl start cfn-hup.service"
                            }
                        }
                    },
                    "configure_ssh": {
                        "commands": {
                            "01_create_ssh_dir": {
                                "command": "mkdir -p /home/bitnami/.ssh"
                            },
                            "02_add_master_ssh_key": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo \"",
                                            {
                                                "Ref": "SSHKey"
                                            },
                                            "\" >>/home/bitnami/.ssh/authorized_keys"
                                        ]
                                    ]
                                }
                            },
                            "03_set_ssh_dir_owner": {
                                "command": "chown -R bitnami:bitnami /home/bitnami/.ssh"
                            }
                        }
                    },
                    "configure_efs": {
                        "packages": {
                            "apt": {
                                "nfs-common": []
                            }
                        },
                        "commands": {
                            "01_createdir": {
                                "command": "mkdir -p /efs",
                                "test": "test ! -d /efs"
                            },
                            "02_mount": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "mount -t nfs4 -o \"nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2\" ",
                                            {
                                                "Ref": "EFSFilesystem"
                                            },
                                            ".efs.",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            ".amazonaws.com:/ /efs"
                                        ]
                                    ]
                                },
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            },
                            "03_stop_bitnami": {
                                "command": "systemctl stop bitnami 2>&1 >>/tmp/error.out",
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            },
                            "04_sync_bitnami_data_to_efs": {
                                "command": "rsync -av /opt/bitnami/apps/wordpress/htdocs/ /efs 2>&1 >>/tmp/error.out",
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            },
                            "05_remove_bitnami_directory": {
                                "command": "rm -rf /opt/bitnami/apps/wordpress/htdocs 2>&1 >>/tmp/error.out",
                                "test": "test ! -L /opt/bitnami/apps/wordpress/htdocs"
                            },
                            "06_softlink_to_efs_directory": {
                                "command": "ln -s /efs /opt/bitnami/apps/wordpress/htdocs 2>&1 >>/tmp/error.out",
                                "test": "test ! -L /opt/bitnami/apps/wordpress/htdocs"
                            },
                            "07_start_bitnami": {
                                "command": "systemctl start bitnami 2>&1 >>/tmp/error.out"
                            },
                            "08_mount_efs_on_boot": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo \"",
                                            {
                                                "Ref": "EFSFilesystem"
                                            },
                                            ".efs.",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            ".amazonaws.com:/ /efs ntfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,nofail 0 0\" >>/etc/fstab"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "configure_mysql": {
                        "commands": {
                            "01_disable_mysqld": {
                                "command": "sed -i 's/#!\\/bin\\/sh/#!\\/bin\\/sh\\nexit 0/1' /opt/bitnami/mysql/scripts/ctl.sh"
                            },
                            "02_dump_mysql_database": {
                                "command": "/opt/bitnami/mysql/bin/mysqldump -u bn_wordpress -p`grep DB_PASSWORD /opt/bitnami/apps/wordpress/htdocs/wp-config.php | cut -f4 -d \"'\"` bitnami_wordpress >/tmp/bitnami_wordpress.sql",
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            },
                            "03_create_mysql_user": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo \"CREATE USER '",
                                            {
                                                "Ref": "DBUser"
                                            },
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            "'@'%' IDENTIFIED BY '",
                                            {
                                                "Fn::GetAtt": [
                                                    "DBPassword",
                                                    "Password"
                                                ]
                                            },
                                            "';\" >>/tmp/bitnami_wordpress.sql"
                                        ]
                                    ]
                                },
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            },
                            "04_grant_user_permissions": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo \"GRANT SELECT,INSERT,UPDATE,DELETE ON ",
                                            {
                                                "Ref": "DBName"
                                            },
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            ".* TO '",
                                            {
                                                "Ref": "DBUser"
                                            },
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            "'@'%';\" >>/tmp/bitnami_wordpress.sql"
                                        ]
                                    ]
                                },
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            },
                            "05_flush_priviliges": {
                                "command": "echo \"FLUSH PRIVILEGES;\" >>/tmp/bitnami_wordpress.sql",
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            },
                            "06_InstallRDS": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "cat /tmp/bitnami_wordpress.sql 2>/tmp/error.out | /opt/bitnami/mysql/bin/mysql -u ",
                                            {
                                                "Ref": "DBMasterUser"
                                            },
                                            " -p'",
                                            {
                                                "Fn::GetAtt": [
                                                    "DBMasterPassword",
                                                    "Password"
                                                ]
                                            },
                                            "' -h ",
                                            {
                                                "Fn::GetAtt": [
                                                    "DBInstance",
                                                    "Endpoint.Address"
                                                ]
                                            },
                                            " ",
                                            {
                                                "Ref": "DBName"
                                            },
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            " 2>&1 >>/tmp/error.out"
                                        ]
                                    ]
                                },
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            },
                            "07_replace_mysql_database_name": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sed -ri \"s/^define\\( 'DB_NAME'.*/define\\( 'DB_NAME', '",
                                            {
                                                "Ref": "DBName"
                                            },
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            "' \\);/1\" /opt/bitnami/apps/wordpress/htdocs/wp-config.php 2>&1 >>/tmp/error.out"
                                        ]
                                    ]
                                },
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            },
                            "07_replace_mysql_user": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sed -ri \"s/^define\\( 'DB_USER'.*/define\\( 'DB_USER', '",
                                            {
                                                "Ref": "DBUser"
                                            },
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            "' \\);/1\" /opt/bitnami/apps/wordpress/htdocs/wp-config.php 2>&1 >>/tmp/error.out"
                                        ]
                                    ]
                                },
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            },
                            "08_remove_mysql_password": {
                                "command": "sed -i '/DB_PASSWORD/d' /opt/bitnami/apps/wordpress/htdocs/wp-config.php 2>&1 >>/tmp/error.out",
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            },
                            "09_add_mysql_password": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo \"define('DB_PASSWORD', '",
                                            {
                                                "Fn::GetAtt": [
                                                    "DBPassword",
                                                    "Password"
                                                ]
                                            },
                                            "');\" >>/opt/bitnami/apps/wordpress/htdocs/wp-config.php"
                                        ]
                                    ]
                                },
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            },
                            "10_replace_mysql_host": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sed -i 's/localhost:3306/",
                                            {
                                                "Fn::GetAtt": [
                                                    "DBInstance",
                                                    "Endpoint.Address"
                                                ]
                                            },
                                            ":",
                                            {
                                                "Fn::GetAtt": [
                                                    "DBInstance",
                                                    "Endpoint.Port"
                                                ]
                                            },
                                            "/1' /opt/bitnami/apps/wordpress/htdocs/wp-config.php 2>&1 >>/tmp/error.out"
                                        ]
                                    ]
                                },
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            },
                            "11_remove_mysql_dump_file": {
                                "command": "rm -f /tmp/bitnami_wordpress.sql 2>&1 >>/tmp/error.out",
                                "test": "test -f /tmp/bitnami_wordpress.sql"
                            },
                            "12_stop_bitnami": {
                                "command": "systemctl stop bitnami 2>&1 >>/tmp/error.out",
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            },
                            "13_kill_mysql": {
                                "command": "killall mysqld.bin 2>&1 >>/tmp/error.out"
                            },
                            "14_start_bitnami": {
                                "command": "systemctl start bitnami 2>&1 >>/tmp/error.out",
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            },
                            "15_update_wp_admin_password": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo \"update wp_users set user_pass=md5('",
                                            {
                                                "Fn::GetAtt": [
                                                    "WPAdminPassword",
                                                    "Password"
                                                ]
                                            },
                                            "') where user_login='user';\" | /opt/bitnami/mysql/bin/mysql -u ",
                                            {
                                                "Ref": "DBUser"
                                            },
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            " -p'",
                                            {
                                                "Fn::GetAtt": [
                                                    "DBPassword",
                                                    "Password"
                                                ]
                                            },
                                            "' -h ",
                                            {
                                                "Fn::GetAtt": [
                                                    "DBInstance",
                                                    "Endpoint.Address"
                                                ]
                                            },
                                            " ",
                                            {
                                                "Ref": "DBName"
                                            },
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            " 2>&1 >>/tmp/error.out"
                                        ]
                                    ]
                                },
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            }
                        }
                    },
                    "configure_redis": {
                        "commands": {
                            "01_update_pecl": {
                                "command": "/opt/bitnami/php/bin/pecl channel-update pecl.php.net 2>&1 >>/tmp/error.out"
                            },
                            "02_install_redis": {
                                "command": "printf \"\\n\" | /opt/bitnami/php/bin/pecl install redis 2>&1 >>/tmp/error.out"
                            },
                            "03_enable_redis": {
                                "command": "echo \"extension=redis.so\" >>/opt/bitnami/php/etc/php.ini"
                            },
                            "04_unzip_redis_cache_plugin": {
                                "command": "sudo -u bitnami -i -- /opt/bitnami/common/bin/unzip -d /opt/bitnami/apps/wordpress/htdocs/wp-content/plugins /home/bitnami/redis-cache.1.4.3.zip 2>&1 >>/tmp/error.out",
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            },
                            "05_configure_redis_cache": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo \"define('WP_REDIS_CLUSTER', 'tcp://",
                                            {
                                                "Fn::GetAtt": [
                                                    "redis",
                                                    "ConfigurationEndPoint.Address"
                                                ]
                                            },
                                            ":6379?alias=node01');\" >>/opt/bitnami/apps/wordpress/htdocs/wp-config.php"
                                        ]
                                    ]
                                },
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            },
                            "06_configure_redis_plugin": {
                                "command": "echo \"define('WP_REDIS_CLIENT', 'pecl');\" >>/opt/bitnami/apps/wordpress/htdocs/wp-config.php",
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            },
                            "07_enable_redis_plugin": {
                                "command": "sudo -u bitnami -i -- /opt/bitnami/apps/wordpress/bin/wp plugin activate redis-cache 2>&1 >>/tmp/error.out",
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            },
                            "08_activate_redis_cache": {
                                "command": "sudo -u bitnami -i -- /opt/bitnami/apps/wordpress/bin/wp redis enable 2>&1 >>/tmp/error.out",
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            }
                        }
                    },
                    "configure_wordpress": {
                        "commands": {
                            "01_secure_wordpress_siteurl": {
                                "command": "sed -i \"s/define('WP_SITEURL', 'http/define('WP_SITEURL', 'https/g\" /opt/bitnami/apps/wordpress/htdocs/wp-config.php 2>&1 >>/tmp/error.out",
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            },
                            "02_secure_wordpress_home": {
                                "command": "sed -i \"s/define('WP_HOME', 'http/define('WP_HOME', 'https/g\" /opt/bitnami/apps/wordpress/htdocs/wp-config.php 2>&1 >>/tmp/error.out",
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            },
                            "03_lock_updates": {
                                "command": "touch /efs/.aws_do_not_remove",
                                "test": "test ! -f /efs/.aws_do_not_remove"
                            },
                            "04_fix_file_permissions": {
                                "command": "chmod -R 664 /opt/bitnami/apps/wordpress/htdocs"
                            },
                            "05_fix_dir_permissions": {
                                "command": "chmod -R 775 /opt/bitnami/apps/wordpress/htdocs"
                            },
                            "06_fix_owners": {
                                "command": "chown -R bitnami:daemon /opt/bitnami/apps/wordpress/htdocs"
                            },
                            "07_set_lockfile_permissions": {
                                "command": "chown root:root /opt/bitnami/apps/wordpress/htdocs/.aws_do_not_remove"
                            }
                        },
                        "services": {
                            "systemd": {
                                "bitnami": {
                                    "enabled": "true"
                                }
                            }
                        }
                    },
                    "configure_admin_access": {
                        "commands": {
                            "01_add_admin_user": {
                                "command": "useradd -N -g daemon -s /bin/bash -c 'AWS Admin' awsadmin"
                            },
                            "02_add_sudo_permission": {
                                "command": "echo 'aws-admin ALL=(ALL) NOPASSWD:ALL' >>/etc/sudoers.d/99-aws-admin-user"
                            },
                            "03_create_user_ssh_directory": {
                                "command": "su - aws-admin -c 'mkdir -m 700 /home/aws-admin/.ssh'"
                            },
                            "04_add_ssh_authorized_keys": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo '",
                                            {
                                                "Ref": "SSHKey"
                                            },
                                            "' >/home/aws-admin/.ssh/authorized_keys"
                                        ]
                                    ]
                                }
                            },
                            "05_set_authorized_keys_permissions": {
                                "command": "chmod 600 /home/aws-admin/.ssh/authorized_keys"
                            },
                            "06_set_authorized_keys_owner": {
                                "command": "chown aws-admin:daemon /home/aws-admin/.ssh/authorized_keys"
                            },
                            "07_revoke_bitnami_ssh_access": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo -e \"Match user bitnami\n",
                                            "\tForceCommand internal-sftp\n",
                                            "\tChrootDirectory /opt/bitnami/apps/wordpress/htdocs\n",
                                            "\tPermitTunnel no\n",
                                            "\tAllowAgentForwarding no\n",
                                            "\tAllowTcpForwarding no\n",
                                            "\tX11Forwarding no\n",
                                            "\" >>/etc/ssh/sshd_config"
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegion2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "amiID"
                    ]
                },
                "InstanceType": "t2.micro",
                "SecurityGroups": [
                    {
                        "Ref": "WebServerSecurityGroup"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "apt-get update\n",
                                "apt-get install -y python-pip\n",
                                "mkdir -p /opt/aws/bin /etc/cfn /etc/cfn/hooks.d\n",
                                "curl -k -o /home/bitnami/redis-cache.1.4.3.zip https://downloads.wordpress.org/plugin/redis-cache.1.4.3.zip\n",
                                "curl -k -o /home/bitnami/aws-cfn-bootstrap-latest.tar.gz https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                                "easy_install --script-dir /opt/aws/bin /home/bitnami/aws-cfn-bootstrap-latest.tar.gz\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource LaunchConfig ",
                                "         --configsets install_wordpress ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource WebServerGroup ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "DBEC2SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Open database for access",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3306",
                        "ToPort": "3306",
                        "SourceSecurityGroupId": {
                            "Ref": "WebServerSecurityGroup"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "2cf9f764-aa16-4928-b8c6-a34fb3a82e1e"
                }
            }
        },
        "DBSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "DB Subnet Group",
                "SubnetIds": [
                    {
                        "Ref": "SubnetA"
                    },
                    {
                        "Ref": "SubnetB"
                    }
                ]
            }
        },
        "DBInstance": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "DBName": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "DBName"
                            },
                            {
                                "Ref": "AWS::AccountId"
                            }
                        ]
                    ]
                },
                "Engine": "MySQL",
                "MultiAZ": false,
                "BackupRetentionPeriod": "30",
                "AvailabilityZone": {
                    "Fn::GetAtt": [
                        "SubnetA",
                        "AvailabilityZone"
                    ]
                },
                "DBSubnetGroupName": {
                    "Ref": "DBSubnetGroup"
                },
                "MasterUsername": {
                    "Ref": "DBMasterUser"
                },
                "MasterUserPassword": {
                    "Fn::GetAtt": [
                        "DBMasterPassword",
                        "Password"
                    ]
                },
                "DBInstanceClass": "db.t2.micro",
                "AllocatedStorage": {
                    "Ref": "DBAllocatedStorage"
                },
                "VPCSecurityGroups": [
                    {
                        "Fn::GetAtt": [
                            "DBEC2SecurityGroup",
                            "GroupId"
                        ]
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "fe023818-c01b-4437-8969-504b83a49a4b"
                }
            }
        },
        "Ecache2EC2": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Open Elasticache for access",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "6379",
                        "ToPort": "6379",
                        "SourceSecurityGroupId": {
                            "Ref": "WebServerSecurityGroup"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "1a6b1fa2-545b-4e71-bf3a-7ed9228f873c"
                }
            }
        },
        "ALBHTTPListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "redirect",
                        "RedirectConfig": {
                            "Port": "443",
                            "Protocol": "HTTPS",
                            "StatusCode": "HTTP_301"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "ApplicationLoadBalancer"
                },
                "Port": "80",
                "Protocol": "HTTP"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "4079e92d-7625-4433-bbf6-300a6fa883cf"
                }
            }
        },
        "R53WebsiteDomainName": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "Comment": "SYSTEM-DO-NOT-DELETE",
                "HostedZoneId": {
                    "Ref": "R53HostedZone"
                },
                "Name": {
                    "Ref": "WebsiteName"
                },
                "Type": "CNAME",
                "TTL": "900",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "ApplicationLoadBalancer",
                            "DNSName"
                        ]
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "a93082fe-0377-47c0-882e-209f82837e94"
                }
            }
        },
        "R53DomainName": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "AliasTarget": {
                    "DNSName": {
                        "Fn::GetAtt": [
                            "ApplicationLoadBalancer",
                            "DNSName"
                        ]
                    },
                    "HostedZoneId": {
                        "Fn::GetAtt": [
                            "ApplicationLoadBalancer",
                            "CanonicalHostedZoneID"
                        ]
                    }
                },
                "Comment": "SYSTEM-DO-NOT-DELETE",
                "HostedZoneId": {
                    "Ref": "R53HostedZone"
                },
                "Name": {
                    "Ref": "HostedZoneName"
                },
                "Type": "A"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "fbae180f-ba0e-4228-a8ee-ead91766759c"
                }
            }
        },
        "R53HostedZone": {
            "Type": "AWS::Route53::HostedZone",
            "Properties": {
                "Name": {
                    "Ref": "HostedZoneName"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "e2fc23c2-7ecd-4da5-85f9-37b96614ad79"
                }
            }
        },
        "WEB2ALB": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP and HTTPS access to the Load Balancer",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "6013df14-502b-4c38-acc2-60e63ecd344e"
                }
            }
        }
    },
    "Outputs": {
        "DBMasterUser": {
            "Value": {
                "Ref": "DBMasterUser"
            },
            "Description": "RDS master username"
        },
        "DBMasterPassword": {
            "Value": {
                "Fn::GetAtt": [
                    "DBMasterPassword",
                    "Password"
                ]
            },
            "Description": "RDS master password"
        },
        "DBName": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        {
                            "Ref": "DBName"
                        },
                        {
                            "Ref": "AWS::AccountId"
                        }
                    ]
                ]
            },
            "Description": "DB Name"
        },
        "DBUser": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        {
                            "Ref": "DBUser"
                        },
                        {
                            "Ref": "AWS::AccountId"
                        }
                    ]
                ]
            },
            "Description": "User database username"
        },
        "DBPassword": {
            "Value": {
                "Fn::GetAtt": [
                    "DBPassword",
                    "Password"
                ]
            },
            "Description": "User database password"
        },
        "WPAdminUser": {
            "Value": "user",
            "Description": "WP Admin User"
        },
        "WPAdminPassword": {
            "Value": {
                "Fn::GetAtt": [
                    "WPAdminPassword",
                    "Password"
                ]
            },
            "Description": "WP Admin Console Password"
        },
        "WebsiteURL": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Ref": "WebsiteName"
                        },
                        "/"
                    ]
                ]
            },
            "Description": "Website Address"
        },
        "WebsiteURLAdmin": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Ref": "WebsiteName"
                        },
                        "/wp-admin"
                    ]
                ]
            },
            "Description": "Website Admin Login Address"
        },
        "ALBDNSName": {
            "Value": {
                "Fn::GetAtt": [
                    "ApplicationLoadBalancer",
                    "DNSName"
                ]
            },
            "Description": "ALB DNS Name"
        },
        "ALBCanonicalHostedZoneID": {
            "Value": {
                "Fn::GetAtt": [
                    "ApplicationLoadBalancer",
                    "CanonicalHostedZoneID"
                ]
            },
            "Description": "Hosted Zone ID for the ALB"
        },
        "DBDNSName": {
            "Value": {
                "Fn::GetAtt": [
                    "DBInstance",
                    "Endpoint.Address"
                ]
            },
            "Description": "DB Server DNS Name"
        },
        "RedisDNSName": {
            "Value": {
                "Fn::GetAtt": [
                    "redis",
                    "ConfigurationEndPoint.Address"
                ]
            },
            "Description": "Redis Server DNS Name"
        },
        "EFSDNSName": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        {
                            "Ref": "EFSFilesystem"
                        },
                        ".efs.",
                        {
                            "Ref": "AWS::Region"
                        },
                        ".amazonaws.com"
                    ]
                ]
            },
            "Description": "EFS DNS Name"
        },
        "R53HostedZoneID": {
            "Value": {
                "Ref": "R53HostedZone"
            },
            "Description": "Route53 Hosted Zone ID"
        },
        "AWSBackupRoleARN": {
            "Value": {
                "Fn::GetAtt": [
                    "AWSBackupExecutionRole",
                    "Arn"
                ]
            },
            "Description": "IAM Role for AWS Backup."
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Designer": {
            "f2dddff0-b271-47ff-9211-1d4772d5c93f": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 430,
                    "y": 330
                },
                "z": 1,
                "embeds": []
            },
            "ad2a9854-8204-4b42-bd92-a304f0a3e4ac": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 600,
                    "y": 240
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "6013df14-502b-4c38-acc2-60e63ecd344e"
                ]
            },
            "139f46c6-d78d-47eb-8e7f-6be8867ce059": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 330,
                    "y": 130
                },
                "z": 1,
                "embeds": []
            },
            "2cf9f764-aa16-4928-b8c6-a34fb3a82e1e": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 230,
                    "y": 130
                },
                "z": 1,
                "embeds": []
            },
            "fe023818-c01b-4437-8969-504b83a49a4b": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 130,
                    "y": 130
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "2cf9f764-aa16-4928-b8c6-a34fb3a82e1e"
                ]
            },
            "a4a3c40e-307e-4eae-ab53-797f87e55f24": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 330,
                    "y": 230
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "139f46c6-d78d-47eb-8e7f-6be8867ce059"
                ]
            },
            "d261ec7c-197b-460e-9fa3-b42f3465bb01": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 330,
                    "y": 330
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "a4a3c40e-307e-4eae-ab53-797f87e55f24",
                    "f2dddff0-b271-47ff-9211-1d4772d5c93f"
                ],
                "dependson": [
                    "fe023818-c01b-4437-8969-504b83a49a4b",
                    "e281bcbd-c795-4380-bcbe-b79c90b78fe3"
                ]
            },
            "cb912fe3-95e2-43c8-be77-0bc3b96f1bde": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 540,
                    "y": 330
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "ad2a9854-8204-4b42-bd92-a304f0a3e4ac"
                ]
            },
            "3b5db50b-43cf-4fcd-be69-217a5da0b3d9": {
                "size": {
                    "width": 90,
                    "height": 90
                },
                "position": {
                    "x": 100,
                    "y": 20
                },
                "z": 1,
                "embeds": []
            },
            "e281bcbd-c795-4380-bcbe-b79c90b78fe3": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 230,
                    "y": 30
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "1a6b1fa2-545b-4e71-bf3a-7ed9228f873c"
                ],
                "iscontainedinside": [
                    "3b5db50b-43cf-4fcd-be69-217a5da0b3d9"
                ]
            },
            "1a6b1fa2-545b-4e71-bf3a-7ed9228f873c": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 330,
                    "y": 30
                },
                "z": 1,
                "embeds": []
            },
            "4079e92d-7625-4433-bbf6-300a6fa883cf": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 660,
                    "y": 330
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "ad2a9854-8204-4b42-bd92-a304f0a3e4ac"
                ]
            },
            "e2fc23c2-7ecd-4da5-85f9-37b96614ad79": {
                "size": {
                    "width": 360,
                    "height": 270
                },
                "position": {
                    "x": 780,
                    "y": 90
                },
                "z": 1,
                "embeds": [
                    "fbae180f-ba0e-4228-a8ee-ead91766759c",
                    "a93082fe-0377-47c0-882e-209f82837e94"
                ]
            },
            "fbae180f-ba0e-4228-a8ee-ead91766759c": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 810,
                    "y": 90
                },
                "z": 2,
                "parent": "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                "embeds": [],
                "iscontainedinside": [
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79"
                ]
            },
            "a93082fe-0377-47c0-882e-209f82837e94": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 810,
                    "y": 180
                },
                "z": 2,
                "parent": "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                "embeds": [],
                "iscontainedinside": [
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79",
                    "e2fc23c2-7ecd-4da5-85f9-37b96614ad79"
                ]
            },
            "4d7d61aa-c5ff-4721-95de-1e468708820b": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 540,
                    "y": 430
                },
                "z": 1,
                "embeds": []
            },
            "6013df14-502b-4c38-acc2-60e63ecd344e": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 600,
                    "y": 130
                },
                "z": 0,
                "embeds": []
            }
        }
    }
}
